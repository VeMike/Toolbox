using System;
using System.Collections.Generic;
using System.Linq;
using Com.Toolbox.Utils.Probing;

namespace Com.Toolbox.Utils.List
{
    /// <summary>
    ///     An implementation of <see cref="IPartitioner{T}"/>
    ///     that creates sequential partition. This means
    ///     each original list will be sequentially split
    ///     into the defined number of partitions.
    /// </summary>
    /// <typeparam name="T">
    ///     The type of object in the list
    /// </typeparam>
    public class SequentialPartition<T> : IPartition<T>
    {
        #region Attributes
        
        /// <summary>
        ///     The partitions generated by the class
        /// </summary>
        private readonly IList<IList<T>> partitions;
        
        #endregion

        #region Constructor
        
        /// <summary>
        ///     Creates a new instance of the class
        /// </summary>
        public SequentialPartition()
        {
            this.partitions = new List<IList<T>>();
        }
        
        #endregion

        #region IPartitioner<T> implementation
        /// <summary>
        ///     Creates partitions from a passed <see cref="IList{T}"/>
        /// </summary>
        /// <param name="sourceCollection">
        ///     The <see cref="IList{T}"/>, that should be partitioned
        /// </param>
        /// <param name="partitionSize">
        ///     The number of elements from the <paramref name="sourceCollection"/>, 
        ///     that should be contained in one partition.
        /// </param>
        /// <exception cref="ArgumentNullException">
        ///    Thrown if <paramref name="sourceCollection"/> is null
        /// </exception>
        public void Partition(IList<T> sourceCollection, int partitionSize)
        {
            Guard.AgainstNullArgument(nameof(sourceCollection), sourceCollection);
            
            if (sourceCollection != null &&
               partitionSize > 0)
            {
                this.PartitionList(sourceCollection, partitionSize);
            }
        }

        /// <summary>
        ///     Returns the partition at <paramref name="index"/>, that was
        ///     created by <see cref="Partition(IList{T}, int)"/>
        /// </summary>
        /// <param name="index">
        ///     The <paramref name="index"/> of a partition
        /// </param>
        /// <returns>
        ///     The partition at the specified <paramref name="index"/>
        /// </returns>
        public IList<T> Get(int index)
        {
            return index >= 0 && index < this.partitions.Count ? 
                this.partitions[index]
                : null;
        }

        /// <summary>
        ///     The number of partitions created
        /// </summary>
        public int Partitions { get; private set; }
        
        #endregion

        #region Helpers
        /// <summary>
        ///     Does the actual partitioning of the List
        /// </summary>
        /// <param name="sourceCollection">
        ///     The collection, that will be partitioned
        /// </param>
        /// <param name="partitionSize">
        ///     The prefered size of one partition
        /// </param>
        private void PartitionList(IList<T> sourceCollection, int partitionSize)
        {
            //The number of partitions, that will be created
            this.Partitions = (int)Math.Ceiling(sourceCollection.Count / (double)partitionSize);
            
            for (int i = 0; i < this.Partitions; i++)
                this.partitions.Add(new List<T>(sourceCollection.Skip(partitionSize * i).Take(partitionSize)));
        }
        #endregion
    }
}
